generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]

  tripPlans      TripPlan[]
  favorites      Favorite[]
=======
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  tripPlans TripPlan[]
  favorites Favorite[]
>>>>>>> 21007fe (Switch to Postgres + add NextAuth tables)

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
<<<<<<< HEAD

=======
>>>>>>> 21007fe (Switch to Postgres + add NextAuth tables)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
<<<<<<< HEAD

=======
>>>>>>> 21007fe (Switch to Postgres + add NextAuth tables)
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TripPlan {
  id        String   @id @default(cuid())
  userId    String
  title     String
  citySlug  String?
  items     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
<<<<<<< HEAD

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> 21007fe (Switch to Postgres + add NextAuth tables)
  @@map("trip_plans")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  citySlug  String
  createdAt DateTime @default(now())
<<<<<<< HEAD

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

=======
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> 21007fe (Switch to Postgres + add NextAuth tables)
  @@unique([userId, citySlug])
  @@map("favorites")
}